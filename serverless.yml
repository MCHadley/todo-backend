service: todo-backend
frameworkVersion: "3.2.0"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  environment:
    DYNAMODB_TABLE: todos
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - apiGateway:*
        - cloudwatch:*
      Resource: arn:aws:dynamodb:${self.provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: get
  createTodo:
    handler: api/todohandler.createTodo
    events:
      - httpApi:
          path: /todos
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self.provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}
  getTodos:
    handler: api/todohandler.queryTodos
    events:
      - httpApi:
          path: /todos
          method: GET
          RequestParameters:
            querystrings:
              status: true
    response:
      headers:
        Content-Type: "'application/json'"
      statusCodes:
        200:
          pattern: ""
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self.provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}
  deleteTodo:
    handler: api/todohandler.deleteTodo
    events:
      - httpApi:
          path: /todos
          method: DELETE
    response:
      headers:
        Content-Type: "'application/json'"
      statusCodes:
        200:
          pattern: ""
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self.provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}

custom:
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    noPrependStageInUrl: true

plugins:
  - serverless-offline
