service: todo-backend
frameworkVersion: "3.2.0"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  environment:
    DYNAMODB_TABLE: todos
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - apiGateway:*
        - cloudwatch:*
      Resource: arn:aws:dynamodb:${self.provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: GET
  createTodo:
    handler: api/todohandler.createTodo
    events:
      - httpApi:
          path: /todos
          method: POST
  getTodos:
    handler: api/todohandler.queryTodos
    events:
      - httpApi:
          path: /todos
          method: GET
          RequestParameters:
            querystrings:
              status: true
    response:
      headers:
        Content-Type: "'application/json'"
  deleteTodo:
    handler: api/todohandler.deleteTodo
    events:
      - httpApi:
          path: /todos
          method: DELETE
    response:
      headers:
        Content-Type: "'application/json'"
  updateTodo:
    handler: api/todohandler.updateTodo
    events:
      - httpApi:
          path: /todos
          method: PUT
    response:
      headers:
        Content-Type: "'application/json'"

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: todos
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: description
            AttributeType: S
          - AttributeName: entityType
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: gsi1pk
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: gsi1pk
            KeySchema:
              - AttributeName: gsi1pk
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5

custom:
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    noPrependStageInUrl: true

plugins:
  - serverless-offline
